{"version":3,"sources":["components/Options/Options.jsx","chatbot/config.js","chatbot/ActionProvider.js","chatbot/MessageParser.js","App.js","serviceWorker.js","index.js"],"names":["Options","props","buttonsMarkup","text","handler","actionProvider","handleJavascriptQuiz","id","map","option","key","onClick","className","config","botName","initialMessages","createChatBotMessage","widget","widgets","widgetName","widgetFunc","ActionProvider","setStateFunc","greet","message","addMessageToState","setState","prevState","messages","this","MessageParser","console","log","lowercase","toLowerCase","includes","App","style","maxWidth","messageParser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qTA6BeA,G,MAzBC,SAACC,GACf,IAeMC,EAfU,CACd,CACEC,KAAM,oBACNC,QAASH,EAAMI,eAAeC,qBAC9BC,GAAI,GAEN,CAAEJ,KAAM,WAAYC,QAAS,aAAUG,GAAI,GAC3C,CAAEJ,KAAM,eAAgBC,QAAS,aAAUG,GAAI,GAC/C,CAAEJ,KAAM,kBAAmBC,QAAS,aAAUG,GAAI,GAClD,CAAEJ,KAAM,sBAAuBC,QAAS,aAAUG,GAAI,GACtD,CAAEJ,KAAM,iBAAkBC,QAAS,aAAUG,GAAI,GACjD,CAAEJ,KAAM,UAAWC,QAAS,aAAUG,GAAI,GAC1C,CAAEJ,KAAM,qBAAsBC,QAAS,aAAUG,GAAI,IAGzBC,KAAI,SAACC,GAAD,OAChC,4BAAQC,IAAKD,EAAOF,GAAII,QAASF,EAAOL,QAASQ,UAAU,iBACxDH,EAAON,SAIZ,OAAO,yBAAKS,UAAU,qBAAqBV,KCkB9BW,G,WAtCA,CACbC,QAAS,yBACTC,gBAAiB,CACfC,+BAAqB,8DAEnB,CACEC,OAAQ,aAIdC,QAAS,CACP,CACEC,WAAY,UACZC,WAAY,SAACnB,GAAD,OAAW,kBAAC,EAAYA,Q,sBCW3BoB,EA7Bb,WAAYL,EAAsBM,GAAe,IAAD,gCAKhDC,MAAQ,WACN,IAAMC,EAAU,EAAKR,qBAAqB,iBAC1C,EAAKS,kBAAkBD,IAPuB,KAUhDlB,qBAAuB,WACrB,IAAMkB,EAAU,EAAKR,qBACnB,mCACA,CACEC,OAAQ,qBAIZ,EAAKQ,kBAAkBD,IAlBuB,KAqBhDC,kBAAoB,SAACD,GACnB,EAAKE,UAAS,SAACC,GAAD,sBACTA,EADS,CAEZC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BJ,UAvBpCK,KAAKb,qBAAuBA,EAC5Ba,KAAKH,SAAWJ,G,OCgBLQ,E,WAlBb,WAAYzB,GAAiB,oBAC3BwB,KAAKxB,eAAiBA,E,kDAGlBmB,GACJO,QAAQC,IAAIR,GACZ,IAAMS,EAAYT,EAAQU,cAEtBD,EAAUE,SAAS,UACrBN,KAAKxB,eAAekB,SAGlBU,EAAUE,SAAS,eAAiBF,EAAUE,SAAS,QACzDN,KAAKxB,eAAeC,2B,WCSX8B,MAdf,WACE,OACE,yBAAKxB,UAAU,OACb,yBAAKyB,MAAO,CAAEC,SAAU,UACtB,kBAAC,IAAD,CACEzB,OAAQA,EACRR,eAAgBgB,EAChBkB,cAAeT,OCJLU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMjC,c","file":"static/js/main.364baa53.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Options.css\";\n\nconst Options = (props) => {\n  const options = [\n    {\n      text: \"Available Courses\",\n      handler: props.actionProvider.handleJavascriptQuiz,\n      id: 1,\n    },\n    { text: \"Programs\", handler: () => {}, id: 2 },\n    { text: \"Requirements\", handler: () => {}, id: 3 },\n    { text: \"School calender\", handler: () => {}, id: 4 },\n    { text: \"Departments & units\", handler: () => {}, id: 5 },\n    { text: \"About FuWukari\", handler: () => {}, id: 6 },\n    { text: \"History\", handler: () => {}, id: 7 },\n    { text: \"University Council\", handler: () => {}, id: 8 },\n  ];\n\n  const buttonsMarkup = options.map((option) => (\n    <button key={option.id} onClick={option.handler} className=\"option-button\">\n      {option.text}\n    </button>\n  ));\n\n  return <div className=\"options-container\">{buttonsMarkup}</div>;\n};\n\nexport default Options;\n","import React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nimport Options from \"../components/Options/Options\";\nimport Quiz from \"../components/Quiz/Quiz\";\n\nconst config = {\n  botName: \"FUW-Bot by Mercy Badio\",\n  initialMessages: [\n    createChatBotMessage(\n      `Hello. What do you want to learn Federal university Wukari?`,\n      {\n        widget: \"options\",\n      }\n    ),\n  ],\n  widgets: [\n    {\n      widgetName: \"options\",\n      widgetFunc: (props) => <Options {...props} />,\n    },\n    // {\n    //   widgetName: \"javascriptQuiz\",\n    //   widgetFunc: (props) => <Quiz {...props} />,\n    //   props: {\n    //     questions: [\n    //       // {\n    //       //   question: \"Bot still under development\",\n    //       //   answer:\n    //       //     \"Closure is a way for a function to retain access to it's enclosing function scope after the execution of that function is finished.\",\n    //       //   id: 1,\n    //       // },\n    //       // {\n    //       //   question: \"Explain prototypal inheritance\",\n    //       //   answer:\n    //       //     \"Prototypal inheritance is a link between an object and an object store that holds shared properties. If a property is not found on the host object, javascript will check the prototype object.\",\n    //       //   id: 2,\n    //       // },\n    //     ],\n    //   },\n    // },\n  ],\n};\n\nexport default config;\n","class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello friend.\");\n    this.addMessageToState(message);\n  };\n\n  handleJavascriptQuiz = () => {\n    const message = this.createChatBotMessage(\n      \"we are still under developement!\",\n      {\n        widget: \"availablecourses\",\n      }\n    );\n\n    this.addMessageToState(message);\n  };\n\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages, message],\n    }));\n  };\n}\n\nexport default ActionProvider;\n","class MessageParser {\n  constructor(actionProvider) {\n    this.actionProvider = actionProvider;\n  }\n\n  parse(message) {\n    console.log(message);\n    const lowercase = message.toLowerCase();\n\n    if (lowercase.includes(\"hello\")) {\n      this.actionProvider.greet();\n    }\n\n    if (lowercase.includes(\"javascript\") || lowercase.includes(\"js\")) {\n      this.actionProvider.handleJavascriptQuiz();\n    }\n  }\n}\n\nexport default MessageParser;\n","import React from \"react\";\nimport Chatbot from \"react-chatbot-kit\";\n\nimport config from \"./chatbot/config\";\nimport ActionProvider from \"./chatbot/ActionProvider\";\nimport MessageParser from \"./chatbot/MessageParser\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ maxWidth: \"300px\" }}>\n        <Chatbot\n          config={config}\n          actionProvider={ActionProvider}\n          messageParser={MessageParser}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}